React JS :

	react js is a javascript library for front-end developmemnt.
	used to build user interface and ui components.
	known for its component based architecture which allows us to create reusable comnponents.
	used to build single page application.
	jsx feature

Features  
	1. JSX (JavaScript Syntax Extension):
	JSX combines HTML and JavaScript, allowing you to embed JavaScript objects within HTML elements.
	It enhances code readability and simplifies UI development.

	

	2.Virtual DOM (Document Object Model):
	it is an in-memory representation of DOM.
	The DOM is represented as a tree data structure.
	DOM Refer to the Document object model that represents the content of XML or HTML documents as a tree structure so the pragrams can be read , accessed and changed in document structure , style and contenrt.
	React uses a virtual DOM, which is an exact copy of the real DOM.
	When there are modifications in the web application, React updates the virtual DOM first and then computes the differences between the real DOM and the virtual DOM.
	This approach minimizes unnecessary re-rendering and improves performance.

	3. One-way Data Binding:
	React follows one-way data binding, where data flows from parent components to child components.
	Child components cannot directly return data to their parent components, but they can communicate with parents to modify states based on provided inputs.

	4. Performance:
	React’s virtual DOM and component-based architecture contribute to better performance.
	Separate components allow efficient rendering and faster execution.

Babel : - It is an transpiler.
	- Helps to convert the sourcde to another browser understandable language.
	- bable converts the JSX code into simplwe react function that can be understandabnle by browser.

	
	Node.js - provides the runtime environment to execute javascript code.
	npm		- use to manage project dependencies 
	
	
	IDE - integrated developement environment
		- make developer life easy
		- it is an software suit with basic tools required for software development
		- helps in coding , finding errors and testing, version control , code autocomplete
		- helps to improve productivity
		
	Requirement - 
		- Node:
				For backend
				load server
				
	prject Structure - 
			-node modeules - all the dependecies are here
			-public - static files that dont change
			-src - main react project folder
			-assets - static project data
			-package.json - mata data file, all the information about project, all dependencies information react, dev dependencies , 
			
			-package-lock.json - dependencies info in detail
			
			
	File Extensions:
		.js - javascript
			- conatins regular javascript code
			- used for components
			
		.JSX - stands for javascriptx<Lcombines js with HTML-like tag
		
		
	Components - 1. Functional Components
				 2. Class components
				 
		 1. Functional components - Initialy stateless
								-can use hooks for state and effect
								- simple
	
	JSx - Determine how UI will look when complition is done


	Create Project using vite

	- npm create vita@latest

	create component - 
		- craete the .jsx file to create component.

	To install bootstrap - 
		- install bootstrap using - npm i bootstrap@5.3.3
		- Import the css and js file path in App.jsx 

	JSX - 
		Definition: JSX determines how the UI will
		look wherever the component is used.
		2. Not HTML: Though it resembles HTML,
		you're actually writing JSX, which stands
		for JavaScript XML.
		3. Conversion: JSX gets converted to regular
		JavaScript.
		


	Fragtment - 
		- Allows grouping of multiple elemets without extra dom nodes
		- Two syntaxes:
				1. <React.Fragment>...</React.Fragment>
				2. Short: <>...</>


	Map Method - 
			- use to render the data from ana array
			- JSX Elements: Transform array items into JSX.
			- Inline Rendering: Directly inside JSX
				{items.map(item => <li key={item.id}>{item.name}</li>)} 

	
    Conditional rendering :
            - Helps to display the content based on conditions
            - Allows dynamic user interface

        Methods : 
            1. If-else statement
            2. Ternary operations
            3. Logical Operator

        Benifits :
            • Enhances user experience.
            • Reduces unnecessary rendering.
            • Makes apps more interactive and responsive

    Passing data Via Props :
	Props: Components can receive data from parent components through props, enabling you to pass information and customize component behavior.
        - Mechanism for passing data
        - Read Only , cannot Edit
        - Can pass data from parent to child
        - Communicate betn two components
        - works like html attribute

    CSS Module :
        - Loaclized class names to avoide global conflicts
        - Styles are scopped to individual components
        - component specific Styles
        - can use alongside gloabl CSS when needed


	Passing children -
			- Children helps to pass elemets into component
			- used for reusable components
			- can access with props.children
			- easy to reuse components
	State management - 
			- state represents data that changes over time
			- local and private tho the component
			- changes can cause the componnt to reload
			- for functional components use useState hook.
			- functions taht staterts with use called Hooks.
			- hooks should be use inside component.

	Forms - 
			- components used to collect and manage the user inputs .
			- includes input like text filed, check box, date input & dropdowns.
			- each input state can be srored in component state
			- can use onChange to detect input changes
			- can use onSubmit form form submission and prevent default with event.preventDefault()
			- validation - can use custom validation or third patry libraries 


	useState:
		Components can manage their internal state using the useState hook. 
		This state dictates the component’s appearance and behavior, and updates trigger re-renders.
		Usage
			Adding state to a component
			Updating state based on the previous state
			Updating objects and arrays in state
			Avoiding recreating the initial state
			Resetting state with a key
			Storing information from previous renders

		Syntax:
		const [var, setVar] = useState(initialValue);
		Here,
		
		var: name of the state variable
		setVar: function to manage and modify the state variable
		initialValue: the first value to initialize the variable

		- whenever we want to set or update the var value we can use the setVar method ans pass the new value.





	Lifecycle Methods: React provides lifecycle methods like componentDidMount and componentDidUpdate that allow you to perform actions at specific stages of a component’s lifecycle.
	Conditional Rendering: Control what gets displayed on the screen based on certain conditions using conditional statements within JSX.

	Hooks   - In react application hooks are the reusable functions use access the states.

		* useReducer - usereducer is use handle more complex state logic than useState.
		     - Useful when the next stet is dependent on the previoius state.
		     -  const [state, dispatch] = useReducer(reducer, initialState);
		     - state - current state , dispatch -can call a function that will call and update the state.
		     - reducer - fubnction takes current state and action returns new state
		     - inituialstate - initial value

		eg. ````
			
			    const initialCount = {count : 0};
			
			    function reducer(state , action) {
			        switch (action.type) {
			            case "increment":
			              return { count: state.count + 1 }; // Return a new state object
			            case "decrement":
			              return { count: state.count - 1 };
			            case "reset":
			              return { count: 0 };
			            default:
			              return state;
			          }
			        
			    }
			
			    const [state , dispatch] = useReducer(reducer, initialCount)
			
			    return <>
			
			    <p>Initial count : {state.count}</p>
			
			    <button onClick={() => dispatch({type : 'increment'})}>Add</button>
			    <button onClick={() => dispatch({type : 'decrement'})}>Minus</button>
			    <button onClick={() => dispatch({type : 'reset'})}>Reset</button>
			
			    </>

	UseEffect hook: useful for data fetching or event listeners.
			runs automatically after every render or reload.
			we can provide an dependency array , an function to control when to load .
			if we provide an empty array it will run one time only.
		



			
					
	
